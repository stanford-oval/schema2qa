class @org.schema.Music
#_[name="Music in Schema.org"]
#_[description="Scraped data from websites that support schema.org"]
#[whitelist=["MusicRecording", "MusicAlbum"]] {
  import loader from @org.thingpedia.v2();
  import config from @org.thingpedia.config.none();

  entity Thing
    #[has_ner=true];
  entity Organization
    #[has_ner=true];
  entity Person
    #[has_ner=true];
  entity CreativeWork
    #[has_ner=true];
  entity MusicRecording
    #[has_ner=true];
  entity MusicAlbum
    #[has_ner=true];
  entity MusicPlaylist
    #[has_ner=true];
  entity PerformingGroup
    #[has_ner=true];
  entity MusicGroup
    #[has_ner=true];

  list query Thing(out id: Entity(org.schema.Music:Thing)
                   #_[canonical={
                     base=["name"],
                     passive_verb=["called", "named"]
                   }]
                   #[unique=true]
                   #[filterable=true]
                   #[org_schema_has_data=true],
                   out url: Entity(tt:url)
                   #_[canonical={
                     base=["url", "link"]
                   }]
                   #[org_schema_type="URL"]
                   #[org_schema_has_data=true],
                   out image: Entity(tt:picture)
                   #_[canonical={
                     base=["picture", "image", "photo"]
                   }]
                   #[org_schema_type="ImageObject"]
                   #[org_schema_has_data=true],
                   out description: String
                   #_[canonical={
                     base=["description", "summary"]
                   }]
                   #[org_schema_type="Text"]
                   #[filterable=false]
                   #[string_values="org.schema.Music:Thing_description"]
                   #[org_schema_has_data=true])
  #_[canonical="thing"]
  #_[confirmation="thing"]
  #[confirm=false]
  #[minimal_projection=["id"]]
  #[org_schema_has_data=true]
  #[org_schema_has_name=true];

  list query Organization extends Thing(out id: Entity(org.schema.Music:Organization)
                                        #_[canonical={
                                          base=["name"],
                                          passive_verb=["called", "named"]
                                        }]
                                        #[unique=true]
                                        #[filterable=true]
                                        #[org_schema_has_data=true])
  #_[canonical="organization"]
  #_[confirmation="organization"]
  #[confirm=false]
  #[minimal_projection=["id"]]
  #[org_schema_has_data=true]
  #[org_schema_has_name=true];

  list query Person extends Thing(out id: Entity(org.schema.Music:Person)
                                  #_[canonical={
                                    base=["name"],
                                    passive_verb=["called", "named"]
                                  }]
                                  #[unique=true]
                                  #[filterable=true]
                                  #[org_schema_has_data=true])
  #_[canonical="person"]
  #_[confirmation="person"]
  #[confirm=false]
  #[minimal_projection=["id"]]
  #[org_schema_has_data=true]
  #[org_schema_has_name=true];

  list query CreativeWork extends Thing(out id: Entity(org.schema.Music:CreativeWork)
                                        #_[canonical={
                                          base=["name"],
                                          passive_verb=["called", "named"]
                                        }]
                                        #[unique=true]
                                        #[filterable=true]
                                        #[org_schema_has_data=true],
                                        out inLanguage: Entity(tt:iso_lang_code)
                                        #_[canonical={
                                          base=["language"],
                                          adjective=["#"],
                                          preposition=["in"],
                                          passive_verb=["written in #"],
                                          reverse_property=["# version of"],
                                          base_projection=["language"],
                                          preposition_projection=["in"],
                                          passive_verb_projection=["written | in"]
                                        }]
                                        #[org_schema_type="Text"],
                                        out datePublished: Date
                                        #_[canonical={
                                          passive_verb=["published on #", "written on #"],
                                          base=["date published"],
                                          adjective_argmax=["most recent", "latest", "last", "newest"],
                                          adjective_argmin=["earliest", "first", "oldest"],
                                          base_projection=["date", "year"],
                                          passive_verb_projection=["published | on", "written | on"]
                                        }]
                                        #[org_schema_type="Date"],
                                        out genre: Array(String)
                                        #_[canonical={
                                          base=["genre"],
                                          adjective=["#"]
                                        }]
                                        #[org_schema_type="URL"]
                                        #[string_values="com.spotify:genre"])
  #_[canonical="creative work"]
  #_[confirmation="creative work"]
  #[confirm=false]
  #[minimal_projection=["id"]]
  #[org_schema_has_data=true]
  #[org_schema_has_name=true];

  list query MusicRecording extends CreativeWork(out id: Entity(org.schema.Music:MusicRecording)
                                                 #_[canonical={
                                                   base=["name"],
                                                   passive_verb=["called", "named"]
                                                 }]
                                                 #[unique=true]
                                                 #[filterable=true]
                                                 #[string_values="tt:song_name"]
                                                 #[org_schema_has_data=true],
                                                 out inAlbum: Entity(org.schema.Music:MusicAlbum)
                                                 #_[canonical={
                                                   base=["album"],
                                                   preposition=["in", "in album", "on", "on album", "from", "from album"],
                                                   passive_verb=["included in #"],
                                                   verb=["appears in #", "appears on #", "# have", "# has", "# contains", "# includes"],
                                                   base_projection=["album"],
                                                   verb_projection=["appear | in", "appear | on"],
                                                   reverse_verb_projection=["have", "has", "contain", "contains", "includes"],
                                                   passive_verb_projection=["included | in", "included | on"],
                                                   preposition_projection=["in", "on"]
                                                 }]
                                                 #[org_schema_type="MusicAlbum"]
                                                 #[string_values="tt:song_album"]
                                                 #[org_schema_has_data=true],
                                                 out byArtist: Entity(org.schema.Music:Person)
                                                 #_[canonical={
                                                   base=["artist", "singer", "band"],
                                                   adjective=["# 's", "#"],
                                                   preposition=["by", "by artist"],
                                                   passive_verb=["created by", "sang by", "performed by", "released by"],
                                                   verb=["# sings", "# sang", "# release", "# publish"],
                                                   base_projection=["artist", "singer", "band"],
                                                   passive_verb_projection=["created | by", "sang | by", "performed | by"],
                                                   reverse_verb_projection=["sing", "sang"]
                                                 }]
                                                 #[org_schema_type="MusicGroup"]
                                                 #[string_values="tt:song_artist"]
                                                 #[org_schema_has_data=true],
                                                 out duration: Measure(ms)
                                                 #_[canonical={
                                                   base=["duration", "length"],
                                                   adjective=["# long"],
                                                   adjective_argmax=["longest"],
                                                   adjective_argmin=["shortest"]
                                                 }]
                                                 #[org_schema_type="Duration"])
  #_[canonical=["song", "music recording", "music"]]
  #_[confirmation="music recording"]
  #[confirm=false]
  #[minimal_projection=["id"]]
  #[org_schema_has_data=true]
  #[org_schema_has_name=true];

  list query MusicPlaylist extends CreativeWork(out id: Entity(org.schema.Music:MusicPlaylist)
                                                #_[canonical={
                                                  base=["name"],
                                                  passive_verb=["called", "named"]
                                                }]
                                                #[unique=true]
                                                #[filterable=true]
                                                #[org_schema_has_data=true],
                                                out numTracks: Number
                                                #_[counted_object=["tracks", "songs"]]
                                                #_[canonical={
                                                  base=["number of tracks", "number of songs"]
                                                }]
                                                #[org_schema_type="Integer"])
  #_[canonical="music playlist"]
  #_[confirmation="music playlist"]
  #[confirm=false]
  #[minimal_projection=["id"]]
  #[org_schema_has_data=true]
  #[org_schema_has_name=true];

  list query MusicAlbum extends MusicPlaylist(out id: Entity(org.schema.Music:MusicAlbum)
                                              #_[canonical={
                                                base=["name"],
                                                passive_verb=["called", "named"]
                                              }]
                                              #[unique=true]
                                              #[filterable=true]
                                              #[org_schema_has_data=true],
                                              out byArtist: Entity(org.schema.Music:Person)
                                              #_[canonical={
                                                base=["artist", "singer", "band"],
                                                adjective=["# 's", "#"],
                                                preposition=["by", "by artist"],
                                                passive_verb=["created by", "sang by", "performed by", "released by"],
                                                verb=["# sings", "# sang", "# release", "# publish"],
                                                base_projection=["artist", "singer", "band"],
                                                passive_verb_projection=["created | by", "sang | by", "performed | by"],
                                                reverse_verb_projection=["sing", "sang"]
                                              }]
                                              #[org_schema_type="MusicGroup"]
                                              #[string_values="tt:song_artist"]
                                              #[org_schema_has_data=true])
  #_[canonical=["album"]]
  #_[confirmation="music album"]
  #[confirm=false]
  #[minimal_projection=["id"]]
  #[org_schema_has_data=true]
  #[org_schema_has_name=true];

  list query PerformingGroup extends Organization(out id: Entity(org.schema.Music:PerformingGroup)
                                                  #_[canonical={
                                                    base=["name"],
                                                    passive_verb=["called", "named"]
                                                  }]
                                                  #[unique=true]
                                                  #[filterable=true]
                                                  #[org_schema_has_data=true])
  #_[canonical="performing group"]
  #_[confirmation="performing group"]
  #[confirm=false]
  #[minimal_projection=["id"]]
  #[org_schema_has_data=true]
  #[org_schema_has_name=true];

  list query MusicGroup extends PerformingGroup(out id: Entity(org.schema.Music:MusicGroup)
                                                #_[canonical={
                                                  base=["name"],
                                                  passive_verb=["called", "named"]
                                                }]
                                                #[unique=true]
                                                #[filterable=true]
                                                #[org_schema_has_data=true],
                                                out genre: Array(String)
                                                #_[canonical={
                                                  base=["genre"],
                                                  adjective=["#"]
                                                }]
                                                #[org_schema_type="URL"]
                                                #[string_values="org.schema.Music:MusicGroup_genre"])
  #_[canonical="music group"]
  #_[confirmation="music group"]
  #[confirm=false]
  #[minimal_projection=["id"]]
  #[org_schema_has_data=true]
  #[org_schema_has_name=true];
}

