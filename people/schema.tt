class @org.schema.Person
#_[name="Person in Schema.org"]
#_[description="Scraped data from websites that support schema.org"]
#[whitelist=["Person"]] {
  import loader from @org.thingpedia.v2();
  import config from @org.thingpedia.config.none();

  entity Thing
    #[has_ner=true];
  entity Place
    #[has_ner=true];
  entity Organization
    #[has_ner=true];
  entity Person
    #[has_ner=true];
  entity CivicStructure
    #[has_ner=true];
  entity EducationalOrganization
    #[has_ner=true];

  list query Thing(out id: Entity(org.schema.Person:Thing)
                   #_[canonical={
                     base=["name"],
                     passive_verb=["called", "named"]
                   }]
                   #[unique=true]
                   #[filterable=true]
                   #[org_schema_has_data=true],
                   out url: Entity(tt:url)
                   #_[canonical={
                     base=["url", "link"]
                   }]
                   #[org_schema_type="URL"]
                   #[org_schema_has_data=true],
                   out image: Entity(tt:picture)
                   #_[canonical={
                     base=["picture", "image", "photo"]
                   }]
                   #[org_schema_type="ImageObject"]
                   #[org_schema_has_data=true])
  #_[canonical="thing"]
  #_[confirmation="thing"]
  #[confirm=false]
  #[minimal_projection=["id"]]
  #[org_schema_has_data=true]
  #[org_schema_has_name=true];

  list query Place extends Thing(out id: Entity(org.schema.Person:Place)
                                 #_[canonical={
                                   base=["name"],
                                   passive_verb=["called", "named"]
                                 }]
                                 #[unique=true]
                                 #[filterable=true]
                                 #[org_schema_has_data=true],
                                 out faxNumber: Entity(tt:phone_number)
                                 #_[canonical={
                                   default="property",
                                   base=["fax number"]
                                 }]
                                 #[org_schema_type="Text"]
                                 #[filterable=false],
                                 out telephone: Entity(tt:phone_number)
                                 #_[canonical={
                                   base=["telephone", "phone number"]
                                 }]
                                 #[org_schema_type="Text"]
                                 #[filterable=false])
  #_[canonical="place"]
  #_[confirmation="place"]
  #[confirm=false]
  #[minimal_projection=["id"]]
  #[org_schema_has_data=true]
  #[org_schema_has_name=true];

  list query Organization extends Thing(out id: Entity(org.schema.Person:Organization)
                                        #_[canonical={
                                          base=["name"],
                                          passive_verb=["called", "named"]
                                        }]
                                        #[unique=true]
                                        #[filterable=true]
                                        #[org_schema_has_data=true],
                                        out faxNumber: Entity(tt:phone_number)
                                        #_[canonical={
                                          default="property",
                                          base=["fax number"]
                                        }]
                                        #[org_schema_type="Text"]
                                        #[filterable=false],
                                        out knowsLanguage: Array(Entity(tt:iso_lang_code))
                                        #_[canonical={
                                          base=["languages mastered"],
                                          verb=["knows", "masters", "understands"],
                                          base_projection=["language"],
                                          verb_projection=["know", "understand", "master"],
                                          adjective=["# speaking"]
                                        }]
                                        #[org_schema_type="Text"],
                                        out telephone: Entity(tt:phone_number)
                                        #_[canonical={
                                          base=["telephone", "phone number"]
                                        }]
                                        #[org_schema_type="Text"]
                                        #[filterable=false],
                                        out email: Entity(tt:email_address)
                                        #_[canonical={
                                          default="property",
                                          base=["email"]
                                        }]
                                        #[org_schema_type="Text"]
                                        #[filterable=false])
  #_[canonical="organization"]
  #_[confirmation="organization"]
  #[confirm=false]
  #[minimal_projection=["id"]]
  #[org_schema_has_data=true]
  #[org_schema_has_name=true];

  list query Person extends Thing(out id: Entity(org.schema.Person:Person)
                                  #_[canonical={
                                    base=["name"],
                                    passive_verb=["called", "named"]
                                  }]
                                  #[unique=true]
                                  #[filterable=true]
                                  #[string_values="tt:person_full_name"]
                                  #[org_schema_has_data=true],
                                  out alumniOf: Array(Entity(org.schema.Person:Organization))
                                  #_[canonical={
                                    base=["college degrees", "universities", "alma maters"],
                                    reverse_property=["alumni of #", "alumnus of #", "alumna of #", "# alumnus", "# alumni", "# grad", "# graduate"],
                                    verb=["went to #", "graduated from #", "attended #", "studied at #"],
                                    passive_verb=["educated at #"],
                                    base_projection=["college"],
                                    verb_projection=["graduate | from", "go to", "attend", "study at"],
                                    passive_verb_projection=["educated | at"]
                                  }]
                                  #[org_schema_type="Organization"]
                                  #[string_values="tt:university_names"]
                                  #[org_schema_has_data=true],
                                  out award: Array(String)
                                  #_[canonical={
                                    base=["awards", "prize"],
                                    reverse_property=["winner of #", "recipient of #", "# winner", "# awardee", "# recipient", "# holder"],
                                    verb=["has the award #", "has received the # award", "won the award for #", "won the # award", "received the # award", "received the #", "won the #", "won #", "holds the award for #", "holds the # award"],
                                    base_projection=["award", "prize"],
                                    verb_projection=["win", "hold"],
                                    passive_verb=["received"]
                                  }]
                                  #[org_schema_type="Text"]
                                  #[string_values="org.schema.Person:Person_award"]
                                  #[org_schema_has_data=true],
                                  out workLocation: Location
                                  #_[canonical={
                                    default="property",
                                    base=["work location"]
                                  }]
                                  #[org_schema_type="ContactPoint"],
                                  out faxNumber: Entity(tt:phone_number)
                                  #_[canonical={
                                    default="property",
                                    base=["fax number"]
                                  }]
                                  #[org_schema_type="Text"]
                                  #[filterable=false],
                                  out jobTitle: String
                                  #_[canonical={
                                    base=["job title", "position", "title"],
                                    reverse_property=["#"]
                                  }]
                                  #[org_schema_type="Text"]
                                  #[string_values="tt:job_title"]
                                  #[org_schema_has_data=true],
                                  out address: {
                                    addressLocality: String
                                    #_[canonical={
                                      base=["city"],
                                      preposition=["in #", "from #"]
                                    }]
                                    #[org_schema_type="Text"]
                                    #[string_values="tt:location"]
                                    #[org_schema_has_data=true]
                                  }
                                  #_[canonical={
                                    default="property",
                                    base=["address"]
                                  }]
                                  #[org_schema_type="PostalAddress"]
                                  #[org_schema_has_data=true],
                                  out knowsLanguage: Array(Entity(tt:iso_lang_code))
                                  #_[canonical={
                                    base=["languages mastered"],
                                    verb=["knows", "masters", "understands"],
                                    base_projection=["language"],
                                    verb_projection=["know", "understand", "master"],
                                    adjective=["# speaking"]
                                  }]
                                  #[org_schema_type="Text"],
                                  out worksFor: Array(Entity(org.schema.Person:Organization))
                                  #_[canonical={
                                    base=["employers"],
                                    reverse_property=["employee of #", "# employee"],
                                    verb=["works for #", "works at #", "worked at #", "worked for #"],
                                    passive_verb=["employed at #", "employed by #"],
                                    base_projection=["company", "employer"],
                                    verb_projection=["work for", "work | at"]
                                  }]
                                  #[org_schema_type="Organization"]
                                  #[string_values="tt:company_name"]
                                  #[org_schema_has_data=true],
                                  out telephone: Entity(tt:phone_number)
                                  #_[canonical={
                                    base=["telephone", "phone number"]
                                  }]
                                  #[org_schema_type="Text"]
                                  #[filterable=false],
                                  out email: Entity(tt:email_address)
                                  #_[canonical={
                                    default="property",
                                    base=["email"]
                                  }]
                                  #[org_schema_type="Text"]
                                  #[filterable=false])
  #_[canonical="person"]
  #_[confirmation="person"]
  #[confirm=false]
  #[minimal_projection=["id"]]
  #[org_schema_has_data=true]
  #[org_schema_has_name=true];

  list query CivicStructure extends Place(out id: Entity(org.schema.Person:CivicStructure)
                                          #_[canonical={
                                            base=["name"],
                                            passive_verb=["called", "named"]
                                          }]
                                          #[unique=true]
                                          #[filterable=true]
                                          #[org_schema_has_data=true])
  #_[canonical="civic structure"]
  #_[confirmation="civic structure"]
  #[confirm=false]
  #[minimal_projection=["id"]]
  #[org_schema_has_data=true]
  #[org_schema_has_name=true];

  list query EducationalOrganization extends CivicStructure, Organization(out id: Entity(org.schema.Person:EducationalOrganization)
                                                                          #_[canonical={
                                                                            base=["name"],
                                                                            passive_verb=["called", "named"]
                                                                          }]
                                                                          #[unique=true]
                                                                          #[filterable=true]
                                                                          #[org_schema_has_data=true])
  #_[canonical="educational organization"]
  #_[confirmation="educational organization"]
  #[confirm=false]
  #[minimal_projection=["id"]]
  #[org_schema_has_data=true]
  #[org_schema_has_name=true];
}

