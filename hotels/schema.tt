class @org.schema.Hotel
#_[name="Hotel in Schema.org"]
#_[description="Scraped data from websites that support schema.org"]
#[whitelist=["Hotel"]] {
  import loader from @org.thingpedia.v2();
  import config from @org.thingpedia.config.none();

  entity Thing
    #[has_ner=true];
  entity Place
    #[has_ner=true];
  entity Organization
    #[has_ner=true];
  entity LocalBusiness
    #[has_ner=true];
  entity LocationFeatureSpecification
    #[has_ner=true];
  entity LodgingBusiness
    #[has_ner=true];
  entity Hotel
    #[has_ner=true];

  list query Thing(out id: Entity(org.schema.Hotel:Thing)
                   #_[canonical={
                     base=["name"],
                     passive_verb=["called", "named"]
                   }]
                   #[unique=true]
                   #[filterable=true]
                   #[org_schema_has_data=true],
                   out image: Entity(tt:picture)
                   #_[canonical={
                     base=["picture", "image", "photo"]
                   }]
                   #[org_schema_type="ImageObject"]
                   #[org_schema_has_data=true],
                   out description: String
                   #_[canonical={
                     base=["description", "summary"]
                   }]
                   #[org_schema_type="Text"]
                   #[filterable=false]
                   #[string_values="org.schema.Hotel:Thing_description"]
                   #[org_schema_has_data=true])
  #_[canonical="thing"]
  #_[confirmation="thing"]
  #[confirm=false]
  #[minimal_projection=["id"]]
  #[org_schema_has_data=true]
  #[org_schema_has_name=true];

  list query Place extends Thing(out id: Entity(org.schema.Hotel:Place)
                                 #_[canonical={
                                   base=["name"],
                                   passive_verb=["called", "named"]
                                 }]
                                 #[unique=true]
                                 #[filterable=true]
                                 #[org_schema_has_data=true],
                                 out hasMap: Array(Entity(tt:url))
                                 #_[canonical={
                                   default="property",
                                   base=["map"]
                                 }]
                                 #[org_schema_type="URL"]
                                 #[filterable=false]
                                 #[org_schema_has_data=true],
                                 out faxNumber: Entity(tt:phone_number)
                                 #_[canonical={
                                   default="property",
                                   base=["fax number"]
                                 }]
                                 #[org_schema_type="Text"]
                                 #[filterable=false],
                                 out geo: Location
                                 #_[canonical={
                                   base=["location", "address"],
                                   preposition=["in #", "from #", "around #", "at #", "on #"]
                                 }]
                                 #[org_schema_type="GeoCoordinates"]
                                 #[org_schema_has_data=true])
  #_[canonical="place"]
  #_[confirmation="place"]
  #[confirm=false]
  #[minimal_projection=["id"]]
  #[org_schema_has_data=true]
  #[org_schema_has_name=true];

  list query Organization extends Thing(out id: Entity(org.schema.Hotel:Organization)
                                        #_[canonical={
                                          base=["name"],
                                          passive_verb=["called", "named"]
                                        }]
                                        #[unique=true]
                                        #[filterable=true]
                                        #[org_schema_has_data=true],
                                        out aggregateRating: {
                                          reviewCount: Number
                                          #_[counted_object=["reviews"]]
                                          #_[canonical={
                                            default="property",
                                            base=["review count"]
                                          }]
                                          #[org_schema_type="Integer"]
                                          #[org_schema_has_data=true],
                                          ratingValue: Number
                                          #_[canonical={
                                            passive_verb=["rated # star"],
                                            base=["rating", "overall rating", "average rating", "customer rating", "review rating"],
                                            adjective_argmax=["top-rated", "best"],
                                            projection_pronoun=["how"],
                                            passive_verb_projection=["rated"]
                                          }]
                                          #[org_schema_type="Number"]
                                          #[min_number=1]
                                          #[max_number=5]
                                          #[org_schema_has_data=true]
                                        }
                                        #_[canonical={
                                          default="property",
                                          base=["aggregate rating"]
                                        }]
                                        #[org_schema_type="AggregateRating"]
                                        #[org_schema_has_data=true],
                                        out faxNumber: Entity(tt:phone_number)
                                        #_[canonical={
                                          default="property",
                                          base=["fax number"]
                                        }]
                                        #[org_schema_type="Text"]
                                        #[filterable=false],
                                        out address: {
                                          postalCode: String
                                          #_[canonical={
                                            base=["postal code", "postcode", "zip code"],
                                            preposition=["in #", "from #"]
                                          }]
                                          #[org_schema_type="Text"]
                                          #[string_values="org.schema.Hotel:Organization_address_postalCode"]
                                          #[org_schema_has_data=true],
                                          addressCountry: Entity(tt:country)
                                          #_[canonical={
                                            preposition=["in #", "from #"],
                                            base=["country"]
                                          }]
                                          #[org_schema_type="Text"]
                                          #[org_schema_has_data=true],
                                          addressRegion: Entity(tt:us_state)
                                          #_[canonical={
                                            preposition=["in #", "from #"],
                                            base=["state"]
                                          }]
                                          #[org_schema_type="Text"]
                                          #[org_schema_has_data=true]
                                        }
                                        #_[canonical={
                                          default="property",
                                          base=["address"]
                                        }]
                                        #[org_schema_type="PostalAddress"]
                                        #[org_schema_has_data=true],
                                        out telephone: Entity(tt:phone_number)
                                        #_[canonical={
                                          base=["telephone", "phone number"]
                                        }]
                                        #[org_schema_type="Text"]
                                        #[filterable=false]
                                        #[org_schema_has_data=true],
                                        out email: Entity(tt:email_address)
                                        #_[canonical={
                                          default="property",
                                          base=["email"]
                                        }]
                                        #[org_schema_type="Text"]
                                        #[filterable=false])
  #_[canonical="organization"]
  #_[confirmation="organization"]
  #[confirm=false]
  #[minimal_projection=["id"]]
  #[org_schema_has_data=true]
  #[org_schema_has_name=true];

  list query LocalBusiness extends Organization, Place(out id: Entity(org.schema.Hotel:LocalBusiness)
                                                       #_[canonical={
                                                         base=["name"],
                                                         passive_verb=["called", "named"]
                                                       }]
                                                       #[unique=true]
                                                       #[filterable=true]
                                                       #[org_schema_has_data=true],
                                                       out priceRange: Enum(cheap,moderate,expensive,luxury)
                                                       #_[canonical={
                                                         base=["price range"],
                                                         adjective=["#"]
                                                       }]
                                                       #[org_schema_type="Text"])
  #_[canonical="local business"]
  #_[confirmation="local business"]
  #[confirm=false]
  #[minimal_projection=["id"]]
  #[org_schema_has_data=true]
  #[org_schema_has_name=true];

  list query LocationFeatureSpecification extends Thing(out id: Entity(org.schema.Hotel:LocationFeatureSpecification)
                                                        #_[canonical={
                                                          base=["name"],
                                                          passive_verb=["called", "named"]
                                                        }]
                                                        #[unique=true]
                                                        #[filterable=true]
                                                        #[org_schema_has_data=true])
  #_[canonical="location feature specification"]
  #_[confirmation="location feature specification"]
  #[confirm=false]
  #[minimal_projection=["id"]]
  #[org_schema_has_data=true]
  #[org_schema_has_name=true];

  list query LodgingBusiness extends LocalBusiness(out id: Entity(org.schema.Hotel:LodgingBusiness)
                                                   #_[canonical={
                                                     base=["name"],
                                                     passive_verb=["called", "named"]
                                                   }]
                                                   #[unique=true]
                                                   #[filterable=true]
                                                   #[org_schema_has_data=true],
                                                   out petsAllowed: Boolean
                                                   #_[canonical={
                                                     property_true=["pets allowed"],
                                                     property_false=["no pets allowed"],
                                                     verb_true=["allows pets", "accepts pets", "accepts dog"],
                                                     adjective_true=["pets friendly", "dog friendly"]
                                                   }]
                                                   #[org_schema_type="Boolean"],
                                                   out checkinTime: Time
                                                   #_[canonical={
                                                     base=["checkin time", "check in time", "check-in time"]
                                                   }]
                                                   #[org_schema_type="DateTime"]
                                                   #[org_schema_has_data=true],
                                                   out checkoutTime: Time
                                                   #_[canonical={
                                                     base=["checkout time", "check out time", "check-out time"]
                                                   }]
                                                   #[org_schema_type="Time"]
                                                   #[org_schema_has_data=true],
                                                   out amenityFeature: Array(Entity(org.schema.Hotel:LocationFeatureSpecification))
                                                   #_[canonical={
                                                     base=["amenity", "amenity feature"],
                                                     verb=["offers #", "offer #", "has #", "have #"],
                                                     base_projection=["amenity"],
                                                     verb_projection=[""]
                                                   }]
                                                   #[org_schema_type="LocationFeatureSpecification"]
                                                   #[org_schema_has_data=true],
                                                   out starRating: {
                                                     ratingValue: Number
                                                     #_[canonical={
                                                       base=["star rating"],
                                                       property=["# stars"],
                                                       adjective=["# star"]
                                                     }]
                                                     #[org_schema_type="Number"]
                                                     #[min_number=1]
                                                     #[max_number=5]
                                                   }
                                                   #_[canonical={
                                                     default="property",
                                                     base=["star rating"]
                                                   }]
                                                   #[org_schema_type="Rating"])
  #_[canonical="lodging business"]
  #_[confirmation="lodging business"]
  #[confirm=false]
  #[minimal_projection=["id"]]
  #[org_schema_has_data=true]
  #[org_schema_has_name=true];

  list query Hotel extends LodgingBusiness(out id: Entity(org.schema.Hotel:Hotel)
                                           #_[canonical={
                                             base=["name"],
                                             passive_verb=["called", "named"]
                                           }]
                                           #[unique=true]
                                           #[filterable=true]
                                           #[string_values="org.openstreetmap:hotel"]
                                           #[org_schema_has_data=true])
  #_[canonical=["hotel", "resort", "lodging", "motel", "place"]]
  #_[confirmation="hotel"]
  #[confirm=false]
  #[minimal_projection=["id"]]
  #[org_schema_has_data=true]
  #[org_schema_has_name=true];
}

